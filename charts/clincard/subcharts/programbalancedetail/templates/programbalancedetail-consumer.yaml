{{- $pusr := get (include "portaldb" . | fromJson) "username" -}}
{{- $psvc := get (include "portaldb" . | fromJson) "service" -}}
{{- $pdb := get (include "portaldb" . | fromJson) "database" -}}
{{- $pdb_adm := get (include "portaldb" . | fromJson) "db_admin" -}}
{{- $csvc := get (include "couchdb" . | fromJson) "service" -}}
{{- $dbpbdr := get (include "couchdb" . | fromJson) "db_pbdr" -}}
{{- $dbpis := get (include "couchdb" . | fromJson) "db_pis" -}}
{{- $cusr := get (include "couchdb" . | fromJson) "user" -}}
{{- $rmq_usr := get (include "rabbit" . | fromJson) "username" }}
{{- $rmq_svc := get (include "rabbit" . | fromJson) "service" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels: {{ include "programbalancedetail.labels" . | nindent 4 }}
    app: {{ template "programbalancedetail.name" . }}
    component: {{ template "programbalancedetail.consumer.fullname" . }}
    release: {{ .Release.Name }}
    tier: {{ .Values.tier }}
  name: {{ template "programbalancedetail.consumer.fullname" . }}
spec:
  progressDeadlineSeconds: 600
  {{- if not .Values.resources.consumer.autoscaling.enabled }}
  replicas: {{ .Values.resources.consumer.replicas }}
  {{- end }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ template "programbalancedetail.name" . }}
      component: {{ template "programbalancedetail.consumer.fullname" . }}
      release: {{ .Release.Name }}
      tier: {{ .Values.tier }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "programbalancedetail.name" . }}
        component: {{ template "programbalancedetail.consumer.fullname" . }}
        release: {{ .Release.Name }}
        tier: {{ .Values.tier }}
    spec:
      initContainers:
      - name: wait-for-portal
        image: {{ include "pgimage" . }}
        command: ['sh', '-c', 'until psql -d {{ $pdb}} -h {{ $psvc }}.{{ .Release.Namespace }} -U {{ $pusr }} postgres -v ON_ERROR_STOP=1; do echo waiting for database; sleep 2; done;']
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-portaldb-{{ $pdb_adm }}
              name: postgres-admin
      - name: create-portaldb-user
        image: {{ include "pgimage" . }}
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-portaldb-{{ $pdb_adm }}
              name: postgres-admin
        - name: PGSVCPASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-{{ $pusr }}
              name: {{ template "programbalancedetail.fullname" . }}
        command: ["sh", "-c"]
        args:
          - |
            psql -h {{ $psvc}}.{{ .Release.Namespace }} -U {{ $pdb_adm }} -d postgres -v "ON_ERROR_STOP=1" << EOF
            DO
            \$\$
            BEGIN
              IF NOT EXISTS (
                SELECT FROM pg_catalog.pg_roles
                WHERE  rolname = '{{ $pusr }}')
              THEN
                CREATE ROLE {{ $pusr }} LOGIN PASSWORD '$(PGSVCPASSWORD)';
                GRANT ALL ON DATABASE {{ $pdb }} TO {{ $pusr }};
                GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO {{ $pusr }};
                GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO {{ $pusr }};
              END IF;
            END
            \$\$;
            EOF
      - name: wait-for-couchdb
        image: alpine:3.7
        command: [ "sh", "-c", "apk add curl && until curl --fail --connect-timeout 5 http://{{ $csvc}}.{{ .Release.Namespace}}:5984/_up; do sleep 2; done" ]
      containers:
      - args:
        - -c
        - pip install python-logstash git+https://github.com/Greenphire/jslog4kube.git
          && programbalancedetail-consumer
        command:
        - /bin/bash
        env: {{ include "opentelemetry_envs" . | nindent 8 -}}
        - name: XLSX_TMP_DIR
          value: /tmp
        - name: CONFIG_FILE_PATH
          value: /config/config.json
        - name: COUCH_URL
          value: {{ printf "http://%s.%s:5984/" $csvc .Release.Namespace }}
        - name: COUCH_DB
          value: {{ $dbpbdr }}
        - name: COUCH_USER
          value: {{ $cusr }}
        - name: COUCH_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: couchdb-secret
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              key: postgres-{{ $pusr }}
              name: {{ template "programbalancedetail.fullname" . }}
        - name: CLINCARD_DB_URI
          value: {{ printf "postgresql://%s:$(DB_PASS)@%s.%s/%s" $pusr $psvc .Release.Namespace $pdb }}
        - name: CLINCARD_EXCHANGE
          value: clincard_core
        - name: CLINCARD_QUEUE
          value: pbdr_clincard_v2
        - name: CLINCARD_ROUTING_KEY
          value: clincard_core.*
        - name: RABBIT_PASS
          valueFrom:
            secretKeyRef:
              key: payments
              name: rabbit-secret
        - name: RABBITMQ_URI
          value: {{ printf "amqp://%s:$(RABBIT_PASS)@%s.%s:5672/" $rmq_usr $rmq_svc .Release.Namespace }}
        - name: RABBITMQ_EXCHANGE
          value: payments
        - name: RABBITMQ_QUEUE
          value: pbdr_payments_v2
        - name: RABBITMQ_ROUTING_KEY
          value: payments.*
        - name: RABBITMQ_RETRIES
          value: "0"
        - name: RIDESHARE_SWAGGER
          value: http://{{ .Values.dependencies.ridesharesvc }}.{{ .Release.Namespace }}:8080/swagger.json
        - name: PIS_URL
          value: {{ printf "http://%s.%s:5984/" $csvc .Release.Namespace }}
        - name: PIS_DB
          value: {{ $dbpis }}
        - name: PIS_USER
          value: {{ $cusr }}
        - name: PIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: couchdb-secret
        image: {{ .Values.images.consumer }}
        imagePullPolicy: IfNotPresent
        name: programbalancedetail-consumer
        ports:
        - containerPort: 8080
          name: pbdr
          protocol: TCP
        resources:
          limits:
            cpu: {{ .Values.resources.consumer.limits.cpu}}
            memory: {{ .Values.resources.consumer.limits.memory}}
          requests:
            cpu: {{ .Values.resources.consumer.requests.cpu}}
            memory: {{ .Values.resources.consumer.requests.memory}}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config
          name: config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: config.json
            path: config.json
          name: programbalancedetail
        name: config
status: {}

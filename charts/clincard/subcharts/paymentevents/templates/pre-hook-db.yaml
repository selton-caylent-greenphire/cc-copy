apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "paymentevents.fullname" . }}-pre-hook
  labels: {{ include "paymentevents.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1
  completions: 1
  parallelism: 1
  template:
    metadata:
      name: {{ template "paymentevents.fullname" . }}}-pre-hook
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-postgres
        image: {{ include "pgimage" . }}
        command: ['sh', '-c', 'until pg_isready -h {{ include "paymentdb_svc" . }}.{{ .Release.Namespace }} -U {{ include "paymentdb_usr" . }} ; do echo waiting for database; sleep 2; done;']
      containers:
      - name: create-database-and-user
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-microservicedb-{{ include "paymentdb_adm" . }}
              name: {{ .Values.dependencies.postgresadmin }}-pre-hook
        - name: PGSVCPASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-{{ include "paymentdb_usr" . }}
              name: {{ .Values.dependencies.clincardsecrets }}-pre-hook
        image: {{ include "pgimage" . }}
        command: ["sh", "-c"]
        args:
          - |
            psql -h {{ include "paymentdb_svc" . }}.{{ .Release.Namespace }} -U {{ include "paymentdb_adm" . }} -d postgres -v "ON_ERROR_STOP=1" << EOF &&
            DO
            \$\$
            BEGIN
              IF NOT EXISTS (
                SELECT FROM pg_catalog.pg_roles
                WHERE  rolname = '{{ include "paymentdb_usr" . }}')
              THEN
                CREATE ROLE {{ include "paymentdb_usr" . }} LOGIN PASSWORD '$(PGSVCPASSWORD)';
                GRANT ALL ON DATABASE {{ include "paymentdb_db" . }} TO {{ include "paymentdb_usr" . }};
                GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO {{ include "paymentdb_usr" . }};
                GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO {{ include "paymentdb_usr" . }};
              END IF;
            END
            \$\$;
            EOF
            echo "SELECT 'CREATE DATABASE {{ include "paymentdb_db" . }} WITH OWNER = {{ include "paymentdb_usr" . }}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{ include "paymentdb_db" . }}')\\gexec" | psql -h {{ include "paymentdb_svc" . }}.{{ .Release.Namespace }} -U {{ include "paymentdb_adm" . }} -d postgres
